package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"ApiTask/graph/model"
	"context"
	"fmt"
)

// CreateWallet is the resolver for the createWallet field.
func (r *mutationResolver) CreateWallet(ctx context.Context, input model.NewWallet) (*model.Wallet, error) {
	wallet := &model.Wallet{
		Address: input.Address,
		Balance: 1000000,
	}

	r.wallets = append(r.wallets, wallet)
	return wallet, nil
}

// Transfer is the resolver for the transfer field.
func (r *mutationResolver) Transfer(ctx context.Context, fromAddress string, toAddress string, amount int32) (*model.TransferResult, error) {
	n := len(r.wallets)

	for i := 0; i < n; i++ {
		if r.wallets[i].Address == fromAddress {
			if r.wallets[i].Balance-amount < 0 {
				return nil, fmt.Errorf("insufficient balance")
			}
			r.wallets[i].Balance -= amount
		}
	}

	for i := 0; i < n; i++ {
		if r.wallets[i].Address == toAddress {
			r.wallets[i].Balance += amount
			break
		}
	}

	return &model.TransferResult{
		FromAddress: fromAddress,
		ToAddress:   toAddress,
		Amount:      amount,
	}, nil
	//panic(fmt.Errorf("not implemented: Transfer - transfer"))
}

// Wallets is the resolver for the wallets field.
func (r *queryResolver) Wallets(ctx context.Context) ([]*model.Wallet, error) {
	return r.wallets, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
