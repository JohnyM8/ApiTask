package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"ApiTask/graph/model"
	"context"
	"database/sql"
	"fmt"
)

// CreateWallet is the resolver for the createWallet field.
func (r *mutationResolver) CreateWallet(ctx context.Context, input model.NewWallet) (*model.Wallet, error) {
	wallet := &model.Wallet{
		Address: input.Address,
		Balance: 1000000,
	}

	_, err := r.DB.Exec("INSERT INTO wallets (address, balance) VALUES ($1, $2)", input.Address, 1000000)

	if err != nil {
		return nil, fmt.Errorf("could not insert wallet: %w", err)
	}
	return wallet, nil
}

// Transfer is the resolver for the transfer field.
func (r *mutationResolver) Transfer(ctx context.Context, fromAddress string, toAddress string, amount int32) (*model.TransferResult, error) {
	fromRecord := r.DB.QueryRow("SELECT address, balance FROM wallets WHERE address = $1", fromAddress)
	toRecord := r.DB.QueryRow("SELECT address, balance FROM wallets WHERE address = $1", toAddress)

	fromBalance := 0
	toBalance := 0

	err := fromRecord.Scan(new(string), &fromBalance)
	if err == sql.ErrNoRows {
		return nil, fmt.Errorf("wallet not found")
	}

	if fromBalance-int(amount) < 0 {
		return nil, fmt.Errorf("insufficient balance")
	}

	fromBalance -= int(amount)

	err = toRecord.Scan(new(string), &toBalance)
	if err == sql.ErrNoRows {
		return nil, fmt.Errorf("wallet not found")
	}

	toBalance += int(amount)

	_, err = r.DB.Query("UPDATE wallets SET balance = $1 WHERE address = $2", fromBalance, fromAddress)
	if err != nil {
		return nil, fmt.Errorf("query failed: %w", err)
	}

	_, err = r.DB.Query("UPDATE wallets SET balance = $1 WHERE address = $2", toBalance, toAddress)
	if err != nil {
		return nil, fmt.Errorf("query failed: %w", err)
	}

	return &model.TransferResult{
		FromAddress: fromAddress,
		ToAddress:   toAddress,
		Amount:      amount,
	}, nil
	//panic(fmt.Errorf("not implemented: Transfer - transfer"))
}

// Wallets is the resolver for the wallets field.
func (r *queryResolver) Wallets(ctx context.Context) ([]*model.Wallet, error) {
	rows, err := r.DB.Query("SELECT address, balance FROM wallets")
	if err != nil {
		return nil, fmt.Errorf("query failed: %w", err)
	}
	defer rows.Close()

	var wallets []*model.Wallet

	for rows.Next() {
		var w model.Wallet
		err := rows.Scan(&w.Address, &w.Balance)

		if err != nil {
			return nil, fmt.Errorf("scan failed: %w", err)
		}

		wallets = append(wallets, &w)
	}

	if err = rows.Err(); err != nil {
		return nil, fmt.Errorf("rows error: %w", err)
	}

	return wallets, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
